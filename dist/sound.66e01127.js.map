{"version":3,"sources":["utils.js","sound.js"],"names":["hslToRgb","h","s","l","r","g","b","hue2rgb","p","q","t","Math","round","WIDTH","HEIGHT","canvas","document","querySelector","ctx","getContext","width","height","analyzer","bufferLength","handleError","err","console","log","getAudio","stream","navigator","mediaDevices","getUserMedia","audio","catch","audioCtx","AudioContext","createAnalyser","source","createMediaStreamSource","connect","fftSize","frequencyBinCount","timeData","Uint8Array","frequencyData","drawTimeData","drawFrequency","getByteTimeDomainData","clearRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","forEach","data","i","v","y","moveTo","lineTo","stroke","requestAnimationFrame","getByteFrequencyData","barWidth","amount","percent","barHeight","fillStyle","fillRect"],"mappings":"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","file":"sound.66e01127.js","sourceRoot":"..","sourcesContent":["export function hslToRgb(h, s, l) {\n  let r;\n  let g;\n  let b;\n\n  if (s == 0) {\n    r = g = b = l; // achromatic\n  } else {\n    const hue2rgb = function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n","import { hslToRgb } from './utils';\n\nconst WIDTH = 1500;\nconst HEIGHT = 1500;\nconst canvas = document.querySelector('canvas');\nconst ctx = canvas.getContext('2d');\ncanvas.width = WIDTH;\ncanvas.height = HEIGHT;\nlet analyzer;\nlet bufferLength;\n\nfunction handleError(err) {\n  console.log('You must give access to your mic in order to proceed');\n}\n\nasync function getAudio() {\n  const stream = await navigator.mediaDevices\n    .getUserMedia({ audio: true })\n    .catch(handleError);\n  const audioCtx = new AudioContext();\n  analyzer = audioCtx.createAnalyser();\n  const source = audioCtx.createMediaStreamSource(stream);\n  source.connect(analyzer);\n  // How much data should we collect\n  analyzer.fftSize = 2 ** 10;\n  // pull the data off the audio\n  // how many pieces of data are there?!?\n  bufferLength = analyzer.frequencyBinCount;\n  const timeData = new Uint8Array(bufferLength);\n  const frequencyData = new Uint8Array(bufferLength);\n  drawTimeData(timeData);\n  drawFrequency(frequencyData);\n}\n\nfunction drawTimeData(timeData) {\n  // inject the time data into our timeData array\n  analyzer.getByteTimeDomainData(timeData);\n  // now that we have the data, lets turn it into something visual\n  // 1. Clear the canvas\n  ctx.clearRect(0, 0, WIDTH, HEIGHT);\n  // 2. setup some canvas drawing\n  ctx.lineWidth = 10;\n  ctx.strokeStyle = '#ffc600';\n  ctx.beginPath();\n  const sliceWidth = WIDTH / bufferLength;\n  let x = 0;\n  timeData.forEach((data, i) => {\n    const v = data / 128;\n    const y = (v * HEIGHT) / 2;\n    // draw our lines\n    if (i === 0) {\n      ctx.moveTo(x, y);\n    } else {\n      ctx.lineTo(x, y);\n    }\n    x += sliceWidth;\n  });\n\n  ctx.stroke();\n\n  // call itself as soon as possible\n  requestAnimationFrame(() => drawTimeData(timeData));\n}\n\nfunction drawFrequency(frequencyData) {\n  // get the frequency data into our frequencyData array\n  analyzer.getByteFrequencyData(frequencyData);\n  // figure out the bar width\n  const barWidth = (WIDTH / bufferLength) * 2.5;\n  let x = 0;\n  frequencyData.forEach((amount) => {\n    // 0 to 255\n    const percent = amount / 255;\n    const [h, s, l] = [360 / (percent * 360) - 0.5, 0.8, 0.5];\n    const barHeight = HEIGHT * percent * 0.5;\n    // Convert the colour to HSL\n    const [r, g, b] = hslToRgb(h, s, l);\n    ctx.fillStyle = `rgb(${r},${g},${b})`;\n    ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n    x += barWidth + 2;\n  });\n\n  requestAnimationFrame(() => drawFrequency(frequencyData));\n}\n\ngetAudio();\n"]}